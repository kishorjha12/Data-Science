x<-rnorm(100)
x
plot(x)
x
X # 'object X not found' <- R is case sensitive.
x[5]
x[10:15]
x <- c(0.5, 0.6) ## numeric
x <- c(TRUE, FALSE) ## logical
x <- c(T, F) ## logical
x <- c("a", "b", "c") ## character
x <- 9:29 ## integer
x <- c(1+0i, 2+4i) ## complex
x
x <- vector("numeric", length = 10)
x
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
x <- 1:3
y <- 10:12
z <- cbind(x,y)
z
V <- rbind(x,y)
V
x <- data.frame(Cid = 1:4, Purchase = c(T, T, F, F))
x
nrow(x)
ncol(x)
dim(x)
m
m[1,2]
m[2,3]
m[2,3, drop= FALSE]
m[,2]
c(m[1,2],m[2,1])
x
x[1,2]
x[1,]
x[,2]
x[x>2]
x[x>2,]
L <- list(x,m, Cid = 1:4, Purchase = 0.6, Product = "PP1")
L
L[c(1,2)] # retrieve 1st and 3rd object
L$Cid
L$Purchase
L[[1]]
L[[3]]
p <- 1:4; q <- 6:9
p
p + q
p > 2
p * q
d1 <- mtcars
dim(d1)
names(d1)
str(d1)
summary(d1)
library(datasets)
data()
d1 <- mtcars
dim(d1)
names(d1)
str(d1)
summary(d1)
library(datasets)
data()
setwd("C:\\Users\\Classroom 4\\Desktop\\20170326")
data("cars")
str("cars")
data("cars")
data("cars")
str("cars")
data(cars)
str(cars)
View(cars)
View(cars)
View(cars)
plot(cars)
x11()
hist(cars$speed)
hist(cars$speed)
x11()
hist(cars$speed)
3*2
3^1/2
3^(1/2)
3^ 1/2
log(100)
log(2.73)
log(10,base = 10)
log(e)
log(10,base = 10,baseenv())
sqrt(20
)
installed.packages("Rwave")
utils:::menuInstallpkgs()
utils:::menu()
require(translations)
require()
library(Rwave)
j
print("hello")
q()
gpa <- c(3.45, 3.97, 2.98, 4.00)
gpa
print(gpa)
str(gpa)
name <-c("kishor","saroj","shyam","abhash")
name
str(name)
str(name)
gpa
name
name <-c("shyam","kishor","saroj","abhash")
name
name <-c("shyam","saroj","kishor","abhash")
pass <- c(TRUE, TRUE, FALSE, TRUE )
pass[2:4]
name <-c("shyam","gita","ram","shita")
gender <- c("M", "F", "M", "F",)
gender <- c("M", "F", "M", "F")
str(gender)
gender <- factor(gender)
str(gender)
gender <- factor(gender, levels = c("M", "F"))
str(gender)
gender <- factor(gender, levels = c("F", "M"))
str(gender)
x <- 1:5
y <- 2:6
plot(x,y)
x <- data.frame(Cid = 1:4, Purchase = c(T, T, F, F))
x
x <- data.frame(Cid = 1:4, Purchase = c(T, T,F,F))
x
nrow(x)
ncol(x)
x[2]
x[1,2]
x[1,1]
x <- marix(1:6,2,3)
x <- matrix(1:6,2,3)
x
x[1,]
x[,2]
c(x[1,2],x[2,1])
x[1,2, drop = FALSE]
x
x[1,2, drop = TRUE]
x
x[1,2, drop = FALSE]
x[1,2, drop = TRUE]
x<- matrix(1:6, 2, 3)
x
x[1,]
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x
x[c(1,3)]
x
x[c(1,4)]
x[c(1,2)]
x[c(1,3)]
x<-1:4; y<-6:9
x
y
x+y
x>2
y>2
x*y
seq(x)
seq_along(x)
d1 <- mtcars
d1
dim(d1)
names(d1)
str(d1)
summary(d1)
library(datasets)
data()
d2 <- BJsales
D2
d2
attach(mtcars)
Fit1 = lm(mpg ~ wt)
Fit1
mpg
AirPassengers
libary(datasets)
resetClass()
view(mtcars)
view(mtcars)
View(attitude)
iris
library("MASS", lib.loc="/usr/lib/R/library")
library(MASS)
adis2
Aids2
names(Aids2)
view(Aids2)
views(Aids2)
view(aids2)
View(aids2)
View(Aids2)
load("~/Desktop/HackerEarth/LinearRegression.RData")
setwd("~/machine learning practice/multilinearRegression/Bigmartsales")
library(caTools)
library(DMwR)
library(MASS)
train <- read.csv("Train.csv")
test <- read.csv("Test.csv")
str(train)
str(test)
colSums(is.na(train))
colSums(is.na(test))
train <- knnImputation(train, k =6, meth = "weighAvg")
#set working directory
setwd("~/machine learning practice/multilinearRegression/Bigmartsales")
#Required library
library(caTools)
library(DMwR)
library(MASS)
#load datasets
train <- read.csv("Train.csv")
test <- read.csv("Test.csv")
str(train)
str(test)
#checking for null value
colSums(is.na(train))
colSums(is.na(test))
#remove null value by using kNN
train <- knnImputation(train, k =6, meth = "weighAvg")
test <- knnImputation(test, k =6, meth = "weighAvg")
str(train)
str(test)
#split the dataset
#split dataset for first model try
split <- sample.split(train$Item_Outlet_Sales, SplitRatio= 0.7)
train_data <- subset(train,split==TRUE)
val_data <- subset(train,split==FALSE)
str(val_data)
str(train_data)
#first model
lm0 <- lm(Item_Outlet_Sales~.,data=train)
summary(lm0)
pred0 <- predict(lm0, newdata = val_data)
error0 <- regr.eval(val_data$Item_Outlet_Sales,pred0)
error0
head(val_data$Item_Outlet_Sales)
head(pred0)
ttt<- data.frame(val_data$Item_Outlet_Sales,pred0)
#using stepAic
stepOut<-stepAIC(lm0, direction="both")
summary(stepOut)
#Lets check the residuals
par(mfrow=c(2,2))
plot(stepOut)
#We don't want negative values as forecast for bike count!
Output2Mod <- stepOut
Output2Mod[stepOut<=0] <-0
pred1 <-predict(Output2Mod,newdata = val_data)
error1 <- regr.eval(val_data$Item_Outlet_Sales, pred1)
error1
pp<- data.frame(val_data$Item_Outlet_Sales,pred0,pred1)
View(pp)
View(pp)
predtest <- predict(stepOut,newdata = test)
outputMod <- predtest
outputMod[predtest<0]<- 0
output <- data.frame(test$Item_Identifier,outputMod)
View(output)
write.csv(output,'testresult.csv')
write.csv(output,'testresult.csv', row.names = T)
write.csv(output,'testresult.csv', row.names = F)
Item_Identifier<-test$Item_Identifier
output <- data.frame(Item_Identifier,outputMod)
write.csv(output,'testresult.csv', row.names = F)
Item_Identifier<-test$Item_Identifier
Item_Outlet_Sales<- outputMod
output <- data.frame(Item_Identifier,Item_Outlet_Sales)
write.csv(output,'testresult.csv', row.names = F)
write.csv(output,'SampleSubmission.csv', row.names = F)
Item_Identifier<-test$Item_Identifier
Outlet_Identifier <- test$Outlet_Identifier
Item_Outlet_Sales<- outputMod
output <- data.frame(Item_Identifier,Outlet_Identifier,Item_Outlet_Sales)
write.csv(output,'SampleSubmission.csv', row.names = F)
setwd("~/machine learning practice/multilinearRegression/Bigmartsales")
library(caTools)
library(DMwR)
library(MASS)
train <- read.csv("Train.csv")
test <- read.csv("Test.csv")
str(train)
str(test)
setwd("~/machine learning practice/multilinearRegression/Bigmartsales")
library(caTools)
library(DMwR)
library(MASS)
train <- read.csv("Train.csv")
test <- read.csv("Test.csv")
str(train)
View(train)
summary(train)
train$Item_Fat_Content[train$Item_Fat_Content=="LF" | "low fat" | "Low Fat"]<- "Low Fat"
train$Item_Fat_Content[train$Item_Fat_Content=="LF" | train$Item_Fat_Content=="low fat" | train$Item_Fat_Content=="Low Fat"]<- "Low Fat"
summary(train)
str(train)
train$Item_Fat_Content[train$Item_Fat_Content=="reg"]<- "Regular"
str(train)
summary(train)
rm(list=ls(all=TRUE))
setwd("~/machine learning practice/multilinearRegression/Bigmartsales")
rm(list=ls(all=TRUE))
library(caTools)
library(DMwR)
library(MASS)
train <- read.csv("Train.csv")
test <- read.csv("Test.csv")
str(train)
str(test)
summary(train)
train$Item_Fat_Content[train$Item_Fat_Content=="LF" | train$Item_Fat_Content=="low fat"]<- "Low Fat"
train$Item_Fat_Content[train$Item_Fat_Content=="reg"]<- "Regular"
table(train$Item_Fat_Content)
str(train$Item_Fat_Content)
train$Item_Fat_Content = as.factor(train$Item_Fat_Content)
str(train$Item_Fat_Content)
tcolumntest =train$Item_Fat_Content
train$Item_Fat_Content
train$Item_Fat_Content[train$Item_Fat_Content=="reg"]<- "Regular"
summary(train)
train$Item_Visibility[train$Item_Visibility==0]<-Mean(train$Item_Visibility)
train$Item_Visibility[train$Item_Visibility==0]<-mean(train$Item_Visibility)
setwd("~/machine learning practice/multilinearRegression/Bigmartsales")
rm(list=ls(all=TRUE))
library(caTools)
setwd("~/machine learning practice/multilinearRegression/Bigmartsales")
library(caTools)
library(DMwR)
library(MASS)
train1 <- read.csv("Train.csv")
test1 <- read.csv("Test.csv")
train <- rbind(train1,test1)
setwd("~/machine learning practice/multilinearRegression/Bigmartsales")
library(caTools)
library(DMwR)
library(MASS)
train <- read.csv("Train.csv")
test <- read.csv("Test.csv")
str(train)
str(test)
summary(train)
train$Item_Fat_Content[train$Item_Fat_Content=="LF" | train$Item_Fat_Content=="low fat"]<- "Low Fat"
train$Item_Fat_Content[train$Item_Fat_Content=="reg"]<- "Regular"
test$Item_Fat_Content[test$Item_Fat_Content=="LF" | test$Item_Fat_Content=="low fat"]<- "Low Fat"
test$Item_Fat_Content[test$Item_Fat_Content=="reg"]<- "Regular"
test$Item_Visibility[test$Item_Visibility==0]<-mean(test$Item_Visibility)
summary(train)
train$Item_Visibility[train$Item_Visibility==0]<-mean(train$Item_Visibility)
test$Item_Visibility[test$Item_Visibility==0]<-mean(test$Item_Visibility)
summary(train)
test$Item_Visibility[test$Item_Visibility==0]<-mean(test$Item_Visibility)
test$Item_Visibility[test$Item_Visibility==0]<-mean(test$Item_Visibility)
train$Item_Visibility[train$Item_Visibility==0]<-mean(train$Item_Visibility)
summary(train)
test$Outlet_Establishment_Year <- 2013-test$Outlet_Establishment_Year
train$Outlet_Establishment_Year<- 2013-train$Outlet_Establishment_Year
test$Outlet_Establishment_Year <- 2013-test$Outlet_Establishment_Year
setwd("~/machine learning practice/multilinearRegression/Bigmartsales")
library(caTools)
library(DMwR)
library(MASS)
train <- read.csv("Train.csv")
test <- read.csv("Test.csv")
str(train)
str(test)
summary(train)
train$Item_Fat_Content[train$Item_Fat_Content=="LF" | train$Item_Fat_Content=="low fat"]<- "Low Fat"
train$Item_Fat_Content[train$Item_Fat_Content=="reg"]<- "Regular"
test$Item_Fat_Content[test$Item_Fat_Content=="LF" | test$Item_Fat_Content=="low fat"]<- "Low Fat"
test$Item_Fat_Content[test$Item_Fat_Content=="reg"]<- "Regular"
train$Item_Visibility[train$Item_Visibility==0]<-mean(train$Item_Visibility)
test$Item_Visibility[test$Item_Visibility==0]<-mean(test$Item_Visibility)
train$Outlet_Establishment_Year<- 2013-train$Outlet_Establishment_Year
test$Outlet_Establishment_Year <- 2013-test$Outlet_Establishment_Year
setwd("~/machine learning practice/multilinearRegression/Bigmartsales")
library(caTools)
library(DMwR)
library(MASS)
train <- read.csv("Train.csv")
test <- read.csv("Test.csv")
str(train)
str(test)
summary(train)
train$Item_Fat_Content[train$Item_Fat_Content=="LF" | train$Item_Fat_Content=="low fat"]<- "Low Fat"
train$Item_Fat_Content[train$Item_Fat_Content=="reg"]<- "Regular"
test$Item_Fat_Content[test$Item_Fat_Content=="LF" | test$Item_Fat_Content=="low fat"]<- "Low Fat"
test$Item_Fat_Content[test$Item_Fat_Content=="reg"]<- "Regular"
train$Item_Visibility[train$Item_Visibility==0]<-mean(train$Item_Visibility)
test$Item_Visibility[test$Item_Visibility==0]<-mean(test$Item_Visibility)
train$Outlet_Establishment_Year<- 2013-train$Outlet_Establishment_Year
test$Outlet_Establishment_Year <- 2013-test$Outlet_Establishment_Year
summary(train)
colSums(is.na(train))
colSums(is.na(test))
train <- knnImputation(train, k =6, meth = "weighAvg")
test <- knnImputation(test, k =6, meth = "weighAvg")
str(train)
str(test)
colSums(is.na(train))
colSums(is.na(test))
summary(train)
lm0 <- lm(Item_Outlet_Sales~.,data=train)
split <- sample.split(train$Item_Outlet_Sales, SplitRatio= 0.7)
train_data <- subset(train,split==TRUE)
val_data <- subset(train,split==FALSE)
summary(lm0)
pred0 <- predict(lm0,newdata = val_data)
error<-regr.eval(val_data$Item_Outlet_Sales,pred0)
error
stepOut<-stepAIC(lm0, direction="both")
summary(stepOut)
predtest <- predict(stepOut,newdata = test)
outputMod <- predtest
outputMod[predtest<0]<- 0
Item_Identifier<-test$Item_Identifier
Outlet_Identifier <- test$Outlet_Identifier
Item_Outlet_Sales<- outputMod
output <- data.frame(Item_Identifier,Outlet_Identifier,Item_Outlet_Sales)
write.csv(output,'SampleSubmission.csv', row.names = F)
